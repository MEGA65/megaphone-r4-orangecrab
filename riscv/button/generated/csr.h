//--------------------------------------------------------------------------------
// Auto-generated by Migen (f4fcd10) & LiteX (49781467) on 2020-02-23 20:49:34
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_writeb(uint8_t value, unsigned long addr);
extern uint8_t csr_readb(unsigned long addr);
extern void csr_writew(uint16_t value, unsigned long addr);
extern uint16_t csr_readw(unsigned long addr);
extern void csr_writel(uint32_t value, unsigned long addr);
extern uint32_t csr_readl(unsigned long addr);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* button */
#define CSR_BUTTON_BASE 0x82008800L
#define CSR_BUTTON_I_ADDR 0x82008800L
#define CSR_BUTTON_I_SIZE 1
static inline unsigned int button_i_read(void) {
	unsigned int r = csr_readl(0x82008800L);
	return r;
}

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline unsigned int ctrl_reset_read(void) {
	unsigned int r = csr_readl(0x82000000L);
	return r;
}
static inline void ctrl_reset_write(unsigned int value) {
	csr_writel(value, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 1
static inline unsigned int ctrl_scratch_read(void) {
	unsigned int r = csr_readl(0x82000004L);
	return r;
}
static inline void ctrl_scratch_write(unsigned int value) {
	csr_writel(value, 0x82000004L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000008L
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline unsigned int ctrl_bus_errors_read(void) {
	unsigned int r = csr_readl(0x82000008L);
	return r;
}

/* lxspi */
#define CSR_LXSPI_BASE 0x82007800L
#define CSR_LXSPI_BITBANG_ADDR 0x82007800L
#define CSR_LXSPI_BITBANG_SIZE 1
static inline unsigned int lxspi_bitbang_read(void) {
	unsigned int r = csr_readl(0x82007800L);
	return r;
}
static inline void lxspi_bitbang_write(unsigned int value) {
	csr_writel(value, 0x82007800L);
}
#define CSR_LXSPI_BITBANG_MOSI_OFFSET 0
#define CSR_LXSPI_BITBANG_MOSI_SIZE 1
#define CSR_LXSPI_BITBANG_CLK_OFFSET 1
#define CSR_LXSPI_BITBANG_CLK_SIZE 1
#define CSR_LXSPI_BITBANG_CS_N_OFFSET 2
#define CSR_LXSPI_BITBANG_CS_N_SIZE 1
#define CSR_LXSPI_BITBANG_DIR_OFFSET 3
#define CSR_LXSPI_BITBANG_DIR_SIZE 1
#define CSR_LXSPI_MISO_ADDR 0x82007804L
#define CSR_LXSPI_MISO_SIZE 1
static inline unsigned int lxspi_miso_read(void) {
	unsigned int r = csr_readl(0x82007804L);
	return r;
}
#define CSR_LXSPI_BITBANG_EN_ADDR 0x82007808L
#define CSR_LXSPI_BITBANG_EN_SIZE 1
static inline unsigned int lxspi_bitbang_en_read(void) {
	unsigned int r = csr_readl(0x82007808L);
	return r;
}
static inline void lxspi_bitbang_en_write(unsigned int value) {
	csr_writel(value, 0x82007808L);
}

/* messible */
#define CSR_MESSIBLE_BASE 0x82008000L
#define CSR_MESSIBLE_IN_ADDR 0x82008000L
#define CSR_MESSIBLE_IN_SIZE 1
static inline unsigned int messible_in_read(void) {
	unsigned int r = csr_readl(0x82008000L);
	return r;
}
static inline void messible_in_write(unsigned int value) {
	csr_writel(value, 0x82008000L);
}
#define CSR_MESSIBLE_OUT_ADDR 0x82008004L
#define CSR_MESSIBLE_OUT_SIZE 1
static inline unsigned int messible_out_read(void) {
	unsigned int r = csr_readl(0x82008004L);
	return r;
}
#define CSR_MESSIBLE_STATUS_ADDR 0x82008008L
#define CSR_MESSIBLE_STATUS_SIZE 1
static inline unsigned int messible_status_read(void) {
	unsigned int r = csr_readl(0x82008008L);
	return r;
}
#define CSR_MESSIBLE_STATUS_FULL_OFFSET 0
#define CSR_MESSIBLE_STATUS_FULL_SIZE 1
#define CSR_MESSIBLE_STATUS_HAVE_OFFSET 1
#define CSR_MESSIBLE_STATUS_HAVE_SIZE 1

/* reboot */
#define CSR_REBOOT_BASE 0x82006000L
#define CSR_REBOOT_CTRL_ADDR 0x82006000L
#define CSR_REBOOT_CTRL_SIZE 1
static inline unsigned int reboot_ctrl_read(void) {
	unsigned int r = csr_readl(0x82006000L);
	return r;
}
static inline void reboot_ctrl_write(unsigned int value) {
	csr_writel(value, 0x82006000L);
}
#define CSR_REBOOT_CTRL_IMAGE_OFFSET 0
#define CSR_REBOOT_CTRL_IMAGE_SIZE 2
#define CSR_REBOOT_CTRL_KEY_OFFSET 2
#define CSR_REBOOT_CTRL_KEY_SIZE 6
#define CSR_REBOOT_ADDR_ADDR 0x82006004L
#define CSR_REBOOT_ADDR_SIZE 1
static inline unsigned int reboot_addr_read(void) {
	unsigned int r = csr_readl(0x82006004L);
	return r;
}
static inline void reboot_addr_write(unsigned int value) {
	csr_writel(value, 0x82006004L);
}

/* rgb */
#define CSR_RGB_BASE 0x82006800L
#define CSR_RGB_DAT_ADDR 0x82006800L
#define CSR_RGB_DAT_SIZE 1
static inline unsigned int rgb_dat_read(void) {
	unsigned int r = csr_readl(0x82006800L);
	return r;
}
static inline void rgb_dat_write(unsigned int value) {
	csr_writel(value, 0x82006800L);
}
#define CSR_RGB_ADDR_ADDR 0x82006804L
#define CSR_RGB_ADDR_SIZE 1
static inline unsigned int rgb_addr_read(void) {
	unsigned int r = csr_readl(0x82006804L);
	return r;
}
static inline void rgb_addr_write(unsigned int value) {
	csr_writel(value, 0x82006804L);
}
#define CSR_RGB_CTRL_ADDR 0x82006808L
#define CSR_RGB_CTRL_SIZE 1
static inline unsigned int rgb_ctrl_read(void) {
	unsigned int r = csr_readl(0x82006808L);
	return r;
}
static inline void rgb_ctrl_write(unsigned int value) {
	csr_writel(value, 0x82006808L);
}
#define CSR_RGB_CTRL_EXE_OFFSET 0
#define CSR_RGB_CTRL_EXE_SIZE 1
#define CSR_RGB_CTRL_CURREN_OFFSET 1
#define CSR_RGB_CTRL_CURREN_SIZE 1
#define CSR_RGB_CTRL_RGBLEDEN_OFFSET 2
#define CSR_RGB_CTRL_RGBLEDEN_SIZE 1
#define CSR_RGB_CTRL_RRAW_OFFSET 3
#define CSR_RGB_CTRL_RRAW_SIZE 1
#define CSR_RGB_CTRL_GRAW_OFFSET 4
#define CSR_RGB_CTRL_GRAW_SIZE 1
#define CSR_RGB_CTRL_BRAW_OFFSET 5
#define CSR_RGB_CTRL_BRAW_SIZE 1
#define CSR_RGB_RAW_ADDR 0x8200680cL
#define CSR_RGB_RAW_SIZE 1
static inline unsigned int rgb_raw_read(void) {
	unsigned int r = csr_readl(0x8200680cL);
	return r;
}
static inline void rgb_raw_write(unsigned int value) {
	csr_writel(value, 0x8200680cL);
}
#define CSR_RGB_RAW_R_OFFSET 0
#define CSR_RGB_RAW_R_SIZE 1
#define CSR_RGB_RAW_G_OFFSET 1
#define CSR_RGB_RAW_G_SIZE 1
#define CSR_RGB_RAW_B_OFFSET 2
#define CSR_RGB_RAW_B_SIZE 1

/* timer0 */
#define CSR_TIMER0_BASE 0x82002800L
#define CSR_TIMER0_LOAD_ADDR 0x82002800L
#define CSR_TIMER0_LOAD_SIZE 1
static inline unsigned int timer0_load_read(void) {
	unsigned int r = csr_readl(0x82002800L);
	return r;
}
static inline void timer0_load_write(unsigned int value) {
	csr_writel(value, 0x82002800L);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82002804L
#define CSR_TIMER0_RELOAD_SIZE 1
static inline unsigned int timer0_reload_read(void) {
	unsigned int r = csr_readl(0x82002804L);
	return r;
}
static inline void timer0_reload_write(unsigned int value) {
	csr_writel(value, 0x82002804L);
}
#define CSR_TIMER0_EN_ADDR 0x82002808L
#define CSR_TIMER0_EN_SIZE 1
static inline unsigned int timer0_en_read(void) {
	unsigned int r = csr_readl(0x82002808L);
	return r;
}
static inline void timer0_en_write(unsigned int value) {
	csr_writel(value, 0x82002808L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x8200280cL
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline unsigned int timer0_update_value_read(void) {
	unsigned int r = csr_readl(0x8200280cL);
	return r;
}
static inline void timer0_update_value_write(unsigned int value) {
	csr_writel(value, 0x8200280cL);
}
#define CSR_TIMER0_VALUE_ADDR 0x82002810L
#define CSR_TIMER0_VALUE_SIZE 1
static inline unsigned int timer0_value_read(void) {
	unsigned int r = csr_readl(0x82002810L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82002814L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline unsigned int timer0_ev_status_read(void) {
	unsigned int r = csr_readl(0x82002814L);
	return r;
}
static inline void timer0_ev_status_write(unsigned int value) {
	csr_writel(value, 0x82002814L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x82002818L
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline unsigned int timer0_ev_pending_read(void) {
	unsigned int r = csr_readl(0x82002818L);
	return r;
}
static inline void timer0_ev_pending_write(unsigned int value) {
	csr_writel(value, 0x82002818L);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x8200281cL
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline unsigned int timer0_ev_enable_read(void) {
	unsigned int r = csr_readl(0x8200281cL);
	return r;
}
static inline void timer0_ev_enable_write(unsigned int value) {
	csr_writel(value, 0x8200281cL);
}

/* usb */
#define CSR_USB_BASE 0x82004800L
#define CSR_USB_PULLUP_OUT_ADDR 0x82004800L
#define CSR_USB_PULLUP_OUT_SIZE 1
static inline unsigned int usb_pullup_out_read(void) {
	unsigned int r = csr_readl(0x82004800L);
	return r;
}
static inline void usb_pullup_out_write(unsigned int value) {
	csr_writel(value, 0x82004800L);
}
#define CSR_USB_ADDRESS_ADDR 0x82004804L
#define CSR_USB_ADDRESS_SIZE 1
static inline unsigned int usb_address_read(void) {
	unsigned int r = csr_readl(0x82004804L);
	return r;
}
static inline void usb_address_write(unsigned int value) {
	csr_writel(value, 0x82004804L);
}
#define CSR_USB_ADDRESS_ADDR_OFFSET 0
#define CSR_USB_ADDRESS_ADDR_SIZE 7
#define CSR_USB_NEXT_EV_ADDR 0x82004808L
#define CSR_USB_NEXT_EV_SIZE 1
static inline unsigned int usb_next_ev_read(void) {
	unsigned int r = csr_readl(0x82004808L);
	return r;
}
#define CSR_USB_NEXT_EV_IN_OFFSET 0
#define CSR_USB_NEXT_EV_IN_SIZE 1
#define CSR_USB_NEXT_EV_OUT_OFFSET 1
#define CSR_USB_NEXT_EV_OUT_SIZE 1
#define CSR_USB_NEXT_EV_SETUP_OFFSET 2
#define CSR_USB_NEXT_EV_SETUP_SIZE 1
#define CSR_USB_NEXT_EV_RESET_OFFSET 3
#define CSR_USB_NEXT_EV_RESET_SIZE 1
#define CSR_USB_SETUP_DATA_ADDR 0x8200480cL
#define CSR_USB_SETUP_DATA_SIZE 1
static inline unsigned int usb_setup_data_read(void) {
	unsigned int r = csr_readl(0x8200480cL);
	return r;
}
#define CSR_USB_SETUP_DATA_DATA_OFFSET 0
#define CSR_USB_SETUP_DATA_DATA_SIZE 8
#define CSR_USB_SETUP_CTRL_ADDR 0x82004810L
#define CSR_USB_SETUP_CTRL_SIZE 1
static inline unsigned int usb_setup_ctrl_read(void) {
	unsigned int r = csr_readl(0x82004810L);
	return r;
}
static inline void usb_setup_ctrl_write(unsigned int value) {
	csr_writel(value, 0x82004810L);
}
#define CSR_USB_SETUP_CTRL_RESET_OFFSET 5
#define CSR_USB_SETUP_CTRL_RESET_SIZE 1
#define CSR_USB_SETUP_STATUS_ADDR 0x82004814L
#define CSR_USB_SETUP_STATUS_SIZE 1
static inline unsigned int usb_setup_status_read(void) {
	unsigned int r = csr_readl(0x82004814L);
	return r;
}
#define CSR_USB_SETUP_STATUS_EPNO_OFFSET 0
#define CSR_USB_SETUP_STATUS_EPNO_SIZE 4
#define CSR_USB_SETUP_STATUS_HAVE_OFFSET 4
#define CSR_USB_SETUP_STATUS_HAVE_SIZE 1
#define CSR_USB_SETUP_STATUS_PEND_OFFSET 5
#define CSR_USB_SETUP_STATUS_PEND_SIZE 1
#define CSR_USB_SETUP_STATUS_IS_IN_OFFSET 6
#define CSR_USB_SETUP_STATUS_IS_IN_SIZE 1
#define CSR_USB_SETUP_STATUS_DATA_OFFSET 7
#define CSR_USB_SETUP_STATUS_DATA_SIZE 1
#define CSR_USB_SETUP_EV_STATUS_ADDR 0x82004818L
#define CSR_USB_SETUP_EV_STATUS_SIZE 1
static inline unsigned int usb_setup_ev_status_read(void) {
	unsigned int r = csr_readl(0x82004818L);
	return r;
}
static inline void usb_setup_ev_status_write(unsigned int value) {
	csr_writel(value, 0x82004818L);
}
#define CSR_USB_SETUP_EV_PENDING_ADDR 0x8200481cL
#define CSR_USB_SETUP_EV_PENDING_SIZE 1
static inline unsigned int usb_setup_ev_pending_read(void) {
	unsigned int r = csr_readl(0x8200481cL);
	return r;
}
static inline void usb_setup_ev_pending_write(unsigned int value) {
	csr_writel(value, 0x8200481cL);
}
#define CSR_USB_SETUP_EV_ENABLE_ADDR 0x82004820L
#define CSR_USB_SETUP_EV_ENABLE_SIZE 1
static inline unsigned int usb_setup_ev_enable_read(void) {
	unsigned int r = csr_readl(0x82004820L);
	return r;
}
static inline void usb_setup_ev_enable_write(unsigned int value) {
	csr_writel(value, 0x82004820L);
}
#define CSR_USB_IN_DATA_ADDR 0x82004824L
#define CSR_USB_IN_DATA_SIZE 1
static inline unsigned int usb_in_data_read(void) {
	unsigned int r = csr_readl(0x82004824L);
	return r;
}
static inline void usb_in_data_write(unsigned int value) {
	csr_writel(value, 0x82004824L);
}
#define CSR_USB_IN_DATA_DATA_OFFSET 0
#define CSR_USB_IN_DATA_DATA_SIZE 8
#define CSR_USB_IN_CTRL_ADDR 0x82004828L
#define CSR_USB_IN_CTRL_SIZE 1
static inline unsigned int usb_in_ctrl_read(void) {
	unsigned int r = csr_readl(0x82004828L);
	return r;
}
static inline void usb_in_ctrl_write(unsigned int value) {
	csr_writel(value, 0x82004828L);
}
#define CSR_USB_IN_CTRL_EPNO_OFFSET 0
#define CSR_USB_IN_CTRL_EPNO_SIZE 4
#define CSR_USB_IN_CTRL_RESET_OFFSET 5
#define CSR_USB_IN_CTRL_RESET_SIZE 1
#define CSR_USB_IN_CTRL_STALL_OFFSET 6
#define CSR_USB_IN_CTRL_STALL_SIZE 1
#define CSR_USB_IN_STATUS_ADDR 0x8200482cL
#define CSR_USB_IN_STATUS_SIZE 1
static inline unsigned int usb_in_status_read(void) {
	unsigned int r = csr_readl(0x8200482cL);
	return r;
}
#define CSR_USB_IN_STATUS_IDLE_OFFSET 0
#define CSR_USB_IN_STATUS_IDLE_SIZE 1
#define CSR_USB_IN_STATUS_HAVE_OFFSET 4
#define CSR_USB_IN_STATUS_HAVE_SIZE 1
#define CSR_USB_IN_STATUS_PEND_OFFSET 5
#define CSR_USB_IN_STATUS_PEND_SIZE 1
#define CSR_USB_IN_EV_STATUS_ADDR 0x82004830L
#define CSR_USB_IN_EV_STATUS_SIZE 1
static inline unsigned int usb_in_ev_status_read(void) {
	unsigned int r = csr_readl(0x82004830L);
	return r;
}
static inline void usb_in_ev_status_write(unsigned int value) {
	csr_writel(value, 0x82004830L);
}
#define CSR_USB_IN_EV_PENDING_ADDR 0x82004834L
#define CSR_USB_IN_EV_PENDING_SIZE 1
static inline unsigned int usb_in_ev_pending_read(void) {
	unsigned int r = csr_readl(0x82004834L);
	return r;
}
static inline void usb_in_ev_pending_write(unsigned int value) {
	csr_writel(value, 0x82004834L);
}
#define CSR_USB_IN_EV_ENABLE_ADDR 0x82004838L
#define CSR_USB_IN_EV_ENABLE_SIZE 1
static inline unsigned int usb_in_ev_enable_read(void) {
	unsigned int r = csr_readl(0x82004838L);
	return r;
}
static inline void usb_in_ev_enable_write(unsigned int value) {
	csr_writel(value, 0x82004838L);
}
#define CSR_USB_OUT_DATA_ADDR 0x8200483cL
#define CSR_USB_OUT_DATA_SIZE 1
static inline unsigned int usb_out_data_read(void) {
	unsigned int r = csr_readl(0x8200483cL);
	return r;
}
#define CSR_USB_OUT_DATA_DATA_OFFSET 0
#define CSR_USB_OUT_DATA_DATA_SIZE 8
#define CSR_USB_OUT_CTRL_ADDR 0x82004840L
#define CSR_USB_OUT_CTRL_SIZE 1
static inline unsigned int usb_out_ctrl_read(void) {
	unsigned int r = csr_readl(0x82004840L);
	return r;
}
static inline void usb_out_ctrl_write(unsigned int value) {
	csr_writel(value, 0x82004840L);
}
#define CSR_USB_OUT_CTRL_EPNO_OFFSET 0
#define CSR_USB_OUT_CTRL_EPNO_SIZE 4
#define CSR_USB_OUT_CTRL_ENABLE_OFFSET 4
#define CSR_USB_OUT_CTRL_ENABLE_SIZE 1
#define CSR_USB_OUT_CTRL_RESET_OFFSET 5
#define CSR_USB_OUT_CTRL_RESET_SIZE 1
#define CSR_USB_OUT_CTRL_STALL_OFFSET 6
#define CSR_USB_OUT_CTRL_STALL_SIZE 1
#define CSR_USB_OUT_STATUS_ADDR 0x82004844L
#define CSR_USB_OUT_STATUS_SIZE 1
static inline unsigned int usb_out_status_read(void) {
	unsigned int r = csr_readl(0x82004844L);
	return r;
}
#define CSR_USB_OUT_STATUS_EPNO_OFFSET 0
#define CSR_USB_OUT_STATUS_EPNO_SIZE 4
#define CSR_USB_OUT_STATUS_HAVE_OFFSET 4
#define CSR_USB_OUT_STATUS_HAVE_SIZE 1
#define CSR_USB_OUT_STATUS_PEND_OFFSET 5
#define CSR_USB_OUT_STATUS_PEND_SIZE 1
#define CSR_USB_OUT_EV_STATUS_ADDR 0x82004848L
#define CSR_USB_OUT_EV_STATUS_SIZE 1
static inline unsigned int usb_out_ev_status_read(void) {
	unsigned int r = csr_readl(0x82004848L);
	return r;
}
static inline void usb_out_ev_status_write(unsigned int value) {
	csr_writel(value, 0x82004848L);
}
#define CSR_USB_OUT_EV_PENDING_ADDR 0x8200484cL
#define CSR_USB_OUT_EV_PENDING_SIZE 1
static inline unsigned int usb_out_ev_pending_read(void) {
	unsigned int r = csr_readl(0x8200484cL);
	return r;
}
static inline void usb_out_ev_pending_write(unsigned int value) {
	csr_writel(value, 0x8200484cL);
}
#define CSR_USB_OUT_EV_ENABLE_ADDR 0x82004850L
#define CSR_USB_OUT_EV_ENABLE_SIZE 1
static inline unsigned int usb_out_ev_enable_read(void) {
	unsigned int r = csr_readl(0x82004850L);
	return r;
}
static inline void usb_out_ev_enable_write(unsigned int value) {
	csr_writel(value, 0x82004850L);
}

/* version */
#define CSR_VERSION_BASE 0x82007000L
#define CSR_VERSION_MAJOR_ADDR 0x82007000L
#define CSR_VERSION_MAJOR_SIZE 1
static inline unsigned int version_major_read(void) {
	unsigned int r = csr_readl(0x82007000L);
	return r;
}
#define CSR_VERSION_MINOR_ADDR 0x82007004L
#define CSR_VERSION_MINOR_SIZE 1
static inline unsigned int version_minor_read(void) {
	unsigned int r = csr_readl(0x82007004L);
	return r;
}
#define CSR_VERSION_REVISION_ADDR 0x82007008L
#define CSR_VERSION_REVISION_SIZE 1
static inline unsigned int version_revision_read(void) {
	unsigned int r = csr_readl(0x82007008L);
	return r;
}
#define CSR_VERSION_GITREV_ADDR 0x8200700cL
#define CSR_VERSION_GITREV_SIZE 1
static inline unsigned int version_gitrev_read(void) {
	unsigned int r = csr_readl(0x8200700cL);
	return r;
}
#define CSR_VERSION_GITEXTRA_ADDR 0x82007010L
#define CSR_VERSION_GITEXTRA_SIZE 1
static inline unsigned int version_gitextra_read(void) {
	unsigned int r = csr_readl(0x82007010L);
	return r;
}
#define CSR_VERSION_DIRTY_ADDR 0x82007014L
#define CSR_VERSION_DIRTY_SIZE 1
static inline unsigned int version_dirty_read(void) {
	unsigned int r = csr_readl(0x82007014L);
	return r;
}
#define CSR_VERSION_DIRTY_DIRTY_OFFSET 0
#define CSR_VERSION_DIRTY_DIRTY_SIZE 1
#define CSR_VERSION_MODEL_ADDR 0x82007018L
#define CSR_VERSION_MODEL_SIZE 1
static inline unsigned int version_model_read(void) {
	unsigned int r = csr_readl(0x82007018L);
	return r;
}
#define CSR_VERSION_MODEL_MODEL_OFFSET 0
#define CSR_VERSION_MODEL_MODEL_SIZE 8
#define CSR_VERSION_SEED_ADDR 0x8200701cL
#define CSR_VERSION_SEED_SIZE 1
static inline unsigned int version_seed_read(void) {
	unsigned int r = csr_readl(0x8200701cL);
	return r;
}

#endif
